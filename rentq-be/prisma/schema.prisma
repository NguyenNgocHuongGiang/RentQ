generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model bills {
  bill_id        Int             @id @default(autoincrement())
  contract_id    Int
  bill_type      bills_bill_type
  usage_amount   Float?          @db.Float
  price_per_unit Decimal?        @db.Decimal(10, 2)
  amount         Decimal         @db.Decimal(10, 2)
  due_date       DateTime        @db.Date
  status         bills_status    @default(unpaid)
  created_at     DateTime?       @default(now()) @db.Timestamp(0)
  contracts      contracts       @relation(fields: [contract_id], references: [contract_id], onDelete: Cascade, onUpdate: NoAction, map: "bills_ibfk_1")
  payments       payments[]

  @@index([contract_id], map: "contract_id")
}

model contracts {
  contract_id                        Int                @id @default(autoincrement())
  property_id                        Int
  landlord_id                        Int
  start_date                         DateTime           @db.Date
  end_date                           DateTime           @db.Date
  actual_move_in_date                DateTime?          @db.Date
  deposit                            Decimal            @db.Decimal(10, 2)
  rent                               Decimal            @db.Decimal(10, 2)
  status                             contracts_status   @default(pending)
  contract_file_url                  String?            @db.VarChar(255)
  terms_and_conditions               String?            @db.Text
  created_at                         DateTime?          @default(now()) @db.Timestamp(0)
  bills                              bills[]
  contract_tenants                   contract_tenants[]
  properties                         properties         @relation(fields: [property_id], references: [property_id], onDelete: Cascade, onUpdate: NoAction, map: "contracts_ibfk_1")
  users_contracts_landlord_idTousers users              @relation("contracts_landlord_idTousers", fields: [landlord_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "contracts_ibfk_3")

  @@index([landlord_id], map: "landlord_id")
  @@index([property_id], map: "property_id")
}

model messages {
  message_id                        Int       @id @default(autoincrement())
  sender_id                         Int
  receiver_id                       Int
  content                           String    @db.Text
  sent_at                           DateTime? @default(now()) @db.Timestamp(0)
  users_messages_sender_idTousers   users     @relation("messages_sender_idTousers", fields: [sender_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "messages_ibfk_1")
  users_messages_receiver_idTousers users     @relation("messages_receiver_idTousers", fields: [receiver_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "messages_ibfk_2")

  @@index([receiver_id], map: "receiver_id")
  @@index([sender_id], map: "sender_id")
}

model notifications {
  notification_id Int                  @id @default(autoincrement())
  user_id         Int
  message         String               @db.Text
  status          notifications_status @default(unread)
  created_at      DateTime?            @default(now()) @db.Timestamp(0)
  users           users                @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "notifications_ibfk_1")

  @@index([user_id], map: "user_id")
}

model payments {
  payment_id     Int                     @id @default(autoincrement())
  bill_id        Int
  tenant_id      Int
  amount         Decimal                 @db.Decimal(10, 2)
  payment_date   DateTime?               @default(now()) @db.Timestamp(0)
  payment_method payments_payment_method
  bills          bills                   @relation(fields: [bill_id], references: [bill_id], onDelete: Cascade, onUpdate: NoAction, map: "payments_ibfk_1")
  users          users                   @relation(fields: [tenant_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "payments_ibfk_2")

  @@index([bill_id], map: "bill_id")
  @@index([tenant_id], map: "tenant_id")
}

model reports {
  report_id            Int            @id @default(autoincrement())
  reporter_id          Int
  reported_property_id Int
  reason               String         @db.Text
  status               reports_status @default(pending)
  created_at           DateTime?      @default(now()) @db.Timestamp(0)
  users                users          @relation(fields: [reporter_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "reports_ibfk_1")
  properties           properties     @relation(fields: [reported_property_id], references: [property_id], onDelete: Cascade, onUpdate: NoAction, map: "reports_ibfk_2")

  @@index([reporter_id], map: "reporter_id")
  @@index([reported_property_id], map: "reported_property_id")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model reviews {
  review_id   Int        @id @default(autoincrement())
  property_id Int
  tenant_id   Int
  rating      Int?
  comment     String?    @db.Text
  created_at  DateTime?  @default(now()) @db.Timestamp(0)
  properties  properties @relation(fields: [property_id], references: [property_id], onDelete: Cascade, onUpdate: NoAction, map: "reviews_ibfk_1")
  users       users      @relation(fields: [tenant_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "reviews_ibfk_2")

  @@index([tenant_id], map: "tenant_id")
  @@index([property_id], map: "property_id")
}

model role_requests {
  request_id Int                  @id @default(autoincrement())
  user_id    Int
  status     role_requests_status @default(pending)
  created_at DateTime?            @default(now()) @db.Timestamp(0)
  users      users                @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "role_requests_ibfk_1")

  @@index([user_id], map: "user_id")
}

model room_transfer_requests {
  transfer_id Int                           @id @default(autoincrement())
  tenant_id   Int
  property_id Int
  description String                        @db.Text
  status      room_transfer_requests_status @default(pending)
  created_at  DateTime?                     @default(now()) @db.Timestamp(0)
  users       users                         @relation(fields: [tenant_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "room_transfer_requests_ibfk_1")
  properties  properties                    @relation(fields: [property_id], references: [property_id], onDelete: Cascade, onUpdate: NoAction, map: "room_transfer_requests_ibfk_2")

  @@index([tenant_id], map: "tenant_id")
  @@index([property_id], map: "property_id")
}

model roommate_finder {
  finder_id          Int                    @id @default(autoincrement())
  tenant_id          Int
  preferred_location String?                @db.Text
  budget             Decimal?               @db.Decimal(10, 2)
  move_in_date       DateTime?              @db.Date
  preferences        String?                @db.Text
  status             roommate_finder_status @default(active)
  created_at         DateTime?              @default(now()) @db.Timestamp(0)
  users              users                  @relation(fields: [tenant_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "roommate_finder_ibfk_1")

  @@index([tenant_id], map: "tenant_id")
}

model roommate_requests {
  request_id  Int                      @id @default(autoincrement())
  tenant_id   Int
  property_id Int
  description String?                  @db.Text
  status      roommate_requests_status @default(open)
  created_at  DateTime?                @default(now()) @db.Timestamp(0)
  users       users                    @relation(fields: [tenant_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "roommate_requests_ibfk_1")
  properties  properties               @relation(fields: [property_id], references: [property_id], onDelete: Cascade, onUpdate: NoAction, map: "roommate_requests_ibfk_2")

  @@index([tenant_id], map: "tenant_id")
  @@index([property_id], map: "property_id")
}

model users {
  user_id                                Int                      @id @default(autoincrement())
  full_name                              String                   @db.VarChar(255)
  phone                                  String                   @unique(map: "phone") @db.VarChar(20)
  email                                  String                   @unique(map: "email") @db.VarChar(255)
  password                               String                   @db.VarChar(255)
  address                                String?                  @db.Text
  avatar_url                             String?                  @db.VarChar(255)
  role                                   users_role               @default(tenant)
  is_verified                            Boolean                  @default(false)
  created_at                             DateTime?                @default(now()) @db.Timestamp(0)
  contract_tenants                       contract_tenants[]
  contracts_contracts_landlord_idTousers contracts[]              @relation("contracts_landlord_idTousers")
  messages_messages_sender_idTousers     messages[]               @relation("messages_sender_idTousers")
  messages_messages_receiver_idTousers   messages[]               @relation("messages_receiver_idTousers")
  notifications                          notifications[]
  payments                               payments[]
  properties                             properties[]
  reports                                reports[]
  reviews                                reviews[]
  role_requests                          role_requests[]
  room_transfer_requests                 room_transfer_requests[]
  roommate_finder                        roommate_finder[]
  roommate_requests                      roommate_requests[]
}

model posts {
  post_id     Int           @id @default(autoincrement())
  property_id Int
  title       String        @db.VarChar(255)
  alias       String        @db.VarChar(255)
  price       Decimal       @db.Decimal(10, 2)
  description String?       @db.Text
  status      posts_status? @default(active)
  is_approved Boolean       @default(false)
  created_at  DateTime?     @default(now()) @db.Timestamp(0)
  properties  properties    @relation(fields: [property_id], references: [property_id], onDelete: Cascade, onUpdate: NoAction, map: "posts_ibfk_1")

  @@index([property_id], map: "property_id")
}

model properties {
  property_id            Int                      @id @default(autoincrement())
  landlord_id            Int
  address                String                   @db.Text
  area                   Float                    @db.Float
  utilities              String?                  @db.Text
  max_people             Int
  furniture              properties_furniture
  available_from         DateTime                 @db.Date
  property_type          properties_property_type @default(apartment)
  description            String?                  @db.Text
  created_at             DateTime?                @default(now()) @db.Timestamp(0)
  contracts              contracts[]
  posts                  posts[]
  users                  users                    @relation(fields: [landlord_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "properties_ibfk_1")
  property_images        property_images[]
  reports                reports[]
  reviews                reviews[]
  room_transfer_requests room_transfer_requests[]
  roommate_requests      roommate_requests[]

  @@index([landlord_id], map: "landlord_id")
}

model property_images {
  image_id    Int        @id @default(autoincrement())
  property_id Int
  image_url   String     @db.VarChar(255)
  is_main     Boolean    @default(false)
  uploaded_at DateTime?  @default(now()) @db.Timestamp(0)
  properties  properties @relation(fields: [property_id], references: [property_id], onDelete: Cascade, onUpdate: NoAction, map: "property_images_ibfk_1")

  @@index([property_id], map: "property_id")
}

model contract_tenants {
  contract_id Int
  tenant_id   Int
  contracts   contracts @relation(fields: [contract_id], references: [contract_id], onDelete: Cascade, onUpdate: NoAction, map: "contract_tenants_ibfk_1")
  users       users     @relation(fields: [tenant_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction, map: "contract_tenants_ibfk_2")

  @@id([contract_id, tenant_id])
  @@index([tenant_id], map: "tenant_id")
}

enum role_requests_status {
  pending
  approved
  rejected
}

enum bills_bill_type {
  rent
  electricity
  water
  other
}

enum notifications_status {
  unread
  read
}

enum roommate_requests_status {
  open
  closed
}

enum room_transfer_requests_status {
  pending
  approved
  rejected
}

enum reports_status {
  pending
  resolved
}

enum payments_payment_method {
  bank_transfer
  cash
  credit_card
  e_wallet
}

enum bills_status {
  paid
  unpaid
}

enum roommate_finder_status {
  active
  matched
  closed
}

enum users_role {
  admin
  landlord
  tenant
}

enum contracts_status {
  active
  terminated
  pending
}

enum posts_status {
  active
  inactive
}

enum properties_furniture {
  full
  basic
  none
}

enum properties_property_type {
  apartment
  house
  office
  storefront
}
